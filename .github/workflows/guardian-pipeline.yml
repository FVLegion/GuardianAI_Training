name: Run Guardian AI Pipeline on Self-Hosted Runner

on:
  pull_request:
    types: [closed]
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:          # enables the "Run workflow" button in Actions

jobs:
  run-guardian-pipeline:
    runs-on: [self-hosted, guardian, gpu]   # matches your KONG-LEGION runner labels
    timeout-minutes: 360   # 6 hours timeout for training
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Verify Python installation
        shell: cmd
        run: |
          echo "Checking Python installation..."
          python --version
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import torch; print('PyTorch version:', torch.__version__)"

      - name: Verify GPU availability
        shell: cmd
        run: |
          echo "Checking GPU availability..."
          python -c "import torch; print('CUDA available:', torch.cuda.is_available()); print('GPU count:', torch.cuda.device_count()); print('GPU name:', torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'No GPU')"

      - name: Install dependencies
        shell: cmd
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify ClearML connection
        shell: cmd
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          echo "Testing ClearML connection..."
          python -c "from clearml import Task; print('ClearML connection successful')"

      - name: Run Guardian AI Pipeline
        shell: cmd
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          echo "Starting Guardian AI Training Pipeline on KONG-LEGION runner..."
          echo "Runner: ${{ runner.name }}"
          echo "OS: ${{ runner.os }}"
          python Guardian_pipeline.py

      - name: Upload Training Artifacts
        if: always()  # Upload even if pipeline fails
        uses: actions/upload-artifact@v4
        with:
          name: guardian-training-artifacts-${{ github.run_number }}
          path: |
            training_metrics.png
            *.pth
            *.png
            evaluation_outputs/
          retention-days: 30

      - name: Pipeline Summary
        if: always()
        shell: cmd
        run: |
          echo ## Guardian AI Pipeline Summary >> %GITHUB_STEP_SUMMARY%
          echo - **Status**: ${{ job.status }} >> %GITHUB_STEP_SUMMARY%
          echo - **Runner**: KONG-LEGION (Self-hosted GPU) >> %GITHUB_STEP_SUMMARY%
          echo - **OS**: Windows >> %GITHUB_STEP_SUMMARY%
          echo - **Trigger**: ${{ github.event_name }} >> %GITHUB_STEP_SUMMARY%
          echo - **Branch**: ${{ github.head_ref || github.ref_name }} >> %GITHUB_STEP_SUMMARY%
          echo - **Commit**: ${{ github.sha }} >> %GITHUB_STEP_SUMMARY%
          echo. >> %GITHUB_STEP_SUMMARY%
          if exist "training_metrics.png" (
            echo ✅ Training completed successfully >> %GITHUB_STEP_SUMMARY%
          ) else (
            echo ❌ Training failed or incomplete >> %GITHUB_STEP_SUMMARY%
          ) 