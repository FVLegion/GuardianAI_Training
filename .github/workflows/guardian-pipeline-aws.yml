name: Run GuardianAi pipeline on self-hosted aws runner

on:
  push:
    branches:
      - main

jobs:
  run-pipeline:
    runs-on: [self-hosted, Linux, X64, guardian, gpu]   # must match the labels you set
    timeout-minutes: 500 # 8.33 hours
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx
          sudo apt-get install -y libglib2.0-0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup dataset symlink
        run: |
          echo "üîó Setting up dataset symlink for self-hosted runner..."
          
          # Check if absolute dataset path exists
          if [ -d "/home/sagemaker-user/data/Guardian_Dataset" ]; then
            echo "‚úÖ Found dataset at absolute path: /home/sagemaker-user/data/Guardian_Dataset"
            
            # Create data directory in workspace
            mkdir -p data
            
            # Create symlink if it doesn't exist
            if [ ! -L "data/Guardian_Dataset" ]; then
              ln -s /home/sagemaker-user/data/Guardian_Dataset data/Guardian_Dataset
              echo "‚úÖ Created symlink: data/Guardian_Dataset -> /home/sagemaker-user/data/Guardian_Dataset"
            else
              echo "‚úÖ Symlink already exists"
            fi
            
            # Verify symlink
            ls -la data/
            echo "üìä Dataset structure:"
            ls -la data/Guardian_Dataset/ | head -10
            
          else
            echo "‚ö†Ô∏è  Absolute dataset path not found. Pipeline will create mock data."
          fi

      - name: Verify ClearML Configuration
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          echo "üîç Checking ClearML configuration..."
          echo "CLEARML_API_HOST: ${CLEARML_API_HOST:-'Not Set'}"
          echo "CLEARML_API_ACCESS_KEY: ${CLEARML_API_ACCESS_KEY:+Set}"
          echo "CLEARML_API_SECRET_KEY: ${CLEARML_API_SECRET_KEY:+Set}"
          
          echo "üß™ Testing ClearML connection..."
          python -c "
          try:
              from clearml import Task
              print('‚úÖ ClearML import successful')
              task = Task.init(project_name='test', task_name='connection_test', auto_connect_frameworks=False)
              print('‚úÖ ClearML connection successful')
              task.close()
          except Exception as e:
              print(f'‚ùå ClearML connection failed: {e}')
              print('This may be expected if credentials are not configured')
          "

      - name: Run ClearML pipeline
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          python Guardian_pipeline_github.py

  deploy-model:
    runs-on: [self-hosted, Linux, X64, guardian, gpu]
    needs: run-pipeline
    if: success()
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install clearml

      - name: Check deployment status
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          echo "üöÄ Checking model deployment status..."
          
          python3 << 'EOF'
          from clearml import Model
          import sys
          
          try:
              print('üîç Searching for deployed models...')
              
              # First check for any published models
              all_models = Model.query_models(
                  project_name='Guardian_Training',
                  model_name='BiLSTM_ActionRecognition',
                  only_published=True,
                  max_results=5,
                  order_by=['-created']
              )
              
              print(f'üìã Found {len(all_models)} published models')
              
              deployed_model = None
              for model in all_models:
                  print(f'   Model ID: {model.id}')
                  print(f'   Created: {model.created}')
                  print(f'   Tags: {model.tags}')
                  
                  # Check if this model has deployment tags
                  if model.tags and any(tag in ['deployed', 'production'] for tag in model.tags):
                      deployed_model = model
                      break
              
              if deployed_model:
                  print(f'‚úÖ Found deployed model!')
                  print(f'üè∑Ô∏è  Model ID: {deployed_model.id}')
                  print(f'üìÖ Created: {deployed_model.created}')
                  print(f'üè∑Ô∏è  Tags: {deployed_model.tags}')
                  
                  # Try to get model metadata
                  try:
                      design = deployed_model.get_model_design()
                      if design and 'test_accuracy' in design:
                          accuracy = design['test_accuracy']
                          print(f'üìä Test Accuracy: {accuracy:.2f}%')
                      else:
                          print('üìä Test Accuracy: Not available in model metadata')
                  except Exception as e:
                      print(f'‚ö†Ô∏è  Could not get model design: {e}')
              else:
                  print('‚ùå No deployed models found')
                  if all_models:
                      print('‚ö†Ô∏è  Found published models but none are marked as deployed')
                      latest = all_models[0]
                      print(f'   Latest model: {latest.id}')
                      print(f'   Created: {latest.created}')
                  else:
                      print('‚ùå No published models found at all')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'‚ùå Error checking deployment: {e}')
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOF

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Guardian AI Pipeline completed successfully!"
          echo "‚úÖ Model training, optimization, evaluation, and deployment finished"
          echo "üìà Check ClearML dashboard for detailed results and metrics" 
          