name: Run GuardianAi pipeline on self-hosted aws runner

on:
  push:
    branches:
      - main

jobs:
  run-pipeline:
    runs-on: [self-hosted, Linux, X64, guardian, gpu]   # must match the labels you set
    timeout-minutes: 500 # 8.33 hours
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx
          sudo apt-get install -y libglib2.0-0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup dataset symlink
        run: |
          echo "üîó Setting up dataset symlink for self-hosted runner..."
          
          # Check if absolute dataset path exists
          if [ -d "/home/sagemaker-user/data/Guardian_Dataset" ]; then
            echo "‚úÖ Found dataset at absolute path: /home/sagemaker-user/data/Guardian_Dataset"
            
            # Create data directory in workspace
            mkdir -p data
            
            # Create symlink if it doesn't exist
            if [ ! -L "data/Guardian_Dataset" ]; then
              ln -s /home/sagemaker-user/data/Guardian_Dataset data/Guardian_Dataset
              echo "‚úÖ Created symlink: data/Guardian_Dataset -> /home/sagemaker-user/data/Guardian_Dataset"
            else
              echo "‚úÖ Symlink already exists"
            fi
            
            # Verify symlink
            ls -la data/
            echo "üìä Dataset structure:"
            ls -la data/Guardian_Dataset/ | head -10
            
          else
            echo "‚ö†Ô∏è  Absolute dataset path not found. Pipeline will create mock data."
          fi

      - name: Verify ClearML Configuration
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          echo "üîç Checking ClearML configuration..."
          echo "CLEARML_API_HOST: ${CLEARML_API_HOST:-'Not Set'}"
          echo "CLEARML_API_ACCESS_KEY: ${CLEARML_API_ACCESS_KEY:+Set}"
          echo "CLEARML_API_SECRET_KEY: ${CLEARML_API_SECRET_KEY:+Set}"
          
          echo "üß™ Testing ClearML connection..."
          python -c "
          try:
              from clearml import Task
              print('‚úÖ ClearML import successful')
              task = Task.init(project_name='test', task_name='connection_test', auto_connect_frameworks=False)
              print('‚úÖ ClearML connection successful')
              task.close()
          except Exception as e:
              print(f'‚ùå ClearML connection failed: {e}')
              print('This may be expected if credentials are not configured')
          "

      - name: Run ClearML pipeline
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          python Guardian_pipeline_github.py

  deploy-model:
    runs-on: [self-hosted, Linux, X64, guardian, gpu]
    needs: run-pipeline
    if: success()
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install clearml

      - name: Check deployment status
        env:
          CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
          CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
          CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
        run: |
          echo "üöÄ Checking model deployment status..."
          
          python -c "
          from clearml import Model, Task
          import sys
          
          try:
              # Get the latest deployment task
              tasks = Task.get_tasks(
                  project_name='Guardian_Training',
                  task_name='Deploy_Best_Model_GitHub',
                  task_status=['completed'],
                  order_by=['-created']
              )
              
              if not tasks:
                  print('‚ùå No deployment tasks found')
                  sys.exit(1)
              
              latest_task = tasks[0]
              metrics = latest_task.get_last_scalar_metrics()
              
              if 'Deployment' in metrics and 'Status' in metrics['Deployment']:
                  status = metrics['Deployment']['Status']['last']
                  accuracy = metrics['Deployment']['Test_Accuracy']['last']
                  
                  if status == 1:  # deployed
                      print(f'‚úÖ Model deployed successfully!')
                      print(f'üìä Test Accuracy: {accuracy:.2f}%')
                      
                      # Get deployed models
                      models = Model.query_models(
                          project_name='Guardian_Training',
                          tags=['deployed', 'production'],
                          only_published=True,
                          max_results=1,
                          order_by=['-created']
                      )
                      
                      if models:
                          model = models[0]
                          print(f'üè∑Ô∏è  Model ID: {model.id}')
                          print(f'üìÖ Deployed: {model.created}')
                          print(f'üîó Model URL: {model.url}')
                      
                  else:  # not deployed
                      print(f'‚ö†Ô∏è  Model not deployed')
                      print(f'üìä Test Accuracy: {accuracy:.2f}% (below threshold)')
                      
              else:
                  print('‚ùå Could not retrieve deployment status')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'‚ùå Error checking deployment: {e}')
              sys.exit(1)
          "

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Guardian AI Pipeline completed successfully!"
          echo "‚úÖ Model training, optimization, evaluation, and deployment finished"
          echo "üìà Check ClearML dashboard for detailed results and metrics" 
          